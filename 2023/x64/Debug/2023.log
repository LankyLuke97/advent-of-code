  Day11.cpp
C:\Users\Luke\Documents\Studio\advent-of-code\2023\Day11.cpp(72,24): warning C4018: '<': signed/unsigned mismatch
C:\Users\Luke\Documents\Studio\advent-of-code\2023\Day11.cpp(73,24): warning C4018: '<': signed/unsigned mismatch
C:\Users\Luke\Documents\Studio\advent-of-code\2023\Day11.cpp(96,24): warning C4018: '<': signed/unsigned mismatch
C:\Users\Luke\Documents\Studio\advent-of-code\2023\Day11.cpp(97,29): warning C4018: '<': signed/unsigned mismatch
  Day12.cpp
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244: 'initializing': conversion from 'int64_t' to '_Ty2', possible loss of data
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         with
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         [
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:             _Ty2=int
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         ]
  (compiling source file 'Day12.cpp')
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68):
  the template instantiation context (the oldest one first) is
  	C:\Users\Luke\Documents\Studio\advent-of-code\2023\Day12.cpp(178,15):
  	see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<_Ty>>::try_emplace<int64_t&>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&,int64_t &)' being compiled
          with
          [
              _Ty=std::pair<const std::string,int>
          ]
  		C:\Users\Luke\Documents\Studio\advent-of-code\2023\Day12.cpp(178,27):
  		see the first reference to 'std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,int>>>::try_emplace' in 'Day12::part2Recursion'
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\unordered_map(291,34):
  	see reference to function template instantiation 'std::pair<std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,bool> std::_Hash<std::_Umap_traits<_Kty,int,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,int64_t&>(_Keyty &&,int64_t &)' being compiled
          with
          [
              _Ty=std::pair<const std::string,int>,
              _Alloc=std::allocator<std::pair<const std::string,int>>,
              _Kty=std::string,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Keyty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>
          ]
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xhash(699,49):
  	see reference to function template instantiation 'std::_List_node_emplace_op2<std::allocator<std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer>>>::_List_node_emplace_op2<const std::piecewise_construct_t&,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&>,std::tuple<int64_t &>>(_Alnode &,const std::piecewise_construct_t &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&> &&,std::tuple<int64_t &> &&)' being compiled
          with
          [
              _Ty=std::pair<const std::string,int>,
              _Alloc=std::allocator<std::pair<const std::string,int>>,
              _Alnode=std::allocator<std::_List_node<std::pair<const std::string,int>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,int>>>::void_pointer>>
          ]
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\list(585,25):
  	see reference to function template instantiation 'void std::_Default_allocator_traits<_Alloc>::construct<_Ty,const std::piecewise_construct_t&,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&>,std::tuple<int64_t &>>(_Alloc &,_Objty *const ,const std::piecewise_construct_t &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&> &&,std::tuple<int64_t &> &&)' being compiled
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,int>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,int>>>::void_pointer>>,
              _Ty=std::pair<const std::string,int>,
              _Objty=std::pair<const std::string,int>
          ]
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xmemory(723,82):
  	see reference to function template instantiation 'std::pair<const std::string,int>::pair<_Ty&&,int64_t&>(std::piecewise_construct_t,std::tuple<_Ty &&>,std::tuple<int64_t &>)' being compiled
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>
          ]
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(313,15):
  	see reference to function template instantiation 'std::pair<const std::string,int>::pair<std::tuple<_Ty &&>,std::tuple<int64_t &>,0,0>(_Tuple1 &,_Tuple2 &,std::integer_sequence<size_t,0>,std::integer_sequence<size_t,0>)' being compiled
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Tuple1=std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&>,
              _Tuple2=std::tuple<int64_t &>
          ]
  
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244: 'initializing': conversion from '_Ty' to '_Ty2', possible loss of data
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         with
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         [
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:             _Ty=int64_t
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         and
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         [
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:             _Ty2=int
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68): warning C4244:         ]
  (compiling source file 'Day12.cpp')
  C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(309,68):
  the template instantiation context (the oldest one first) is
  	C:\Users\Luke\Documents\Studio\advent-of-code\2023\Day12.cpp(230,14):
  	see reference to function template instantiation 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<_Ty>>::try_emplace<int64_t>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&,int64_t &&)' being compiled
          with
          [
              _Ty=std::pair<const std::string,int>
          ]
  		C:\Users\Luke\Documents\Studio\advent-of-code\2023\Day12.cpp(230,26):
  		see the first reference to 'std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,int>>>::try_emplace' in 'Day12::part2Recursion'
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\unordered_map(291,34):
  	see reference to function template instantiation 'std::pair<std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,bool> std::_Hash<std::_Umap_traits<_Kty,int,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,__int64>(_Keyty &&,__int64 &&)' being compiled
          with
          [
              _Ty=std::pair<const std::string,int>,
              _Alloc=std::allocator<std::pair<const std::string,int>>,
              _Kty=std::string,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Keyty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>
          ]
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xhash(699,49):
  	see reference to function template instantiation 'std::_List_node_emplace_op2<std::allocator<std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer>>>::_List_node_emplace_op2<const std::piecewise_construct_t&,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&>,std::tuple<__int64 &&>>(_Alnode &,const std::piecewise_construct_t &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&> &&,std::tuple<__int64 &&> &&)' being compiled
          with
          [
              _Ty=std::pair<const std::string,int>,
              _Alloc=std::allocator<std::pair<const std::string,int>>,
              _Alnode=std::allocator<std::_List_node<std::pair<const std::string,int>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,int>>>::void_pointer>>
          ]
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\list(585,25):
  	see reference to function template instantiation 'void std::_Default_allocator_traits<_Alloc>::construct<_Ty,const std::piecewise_construct_t&,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&>,std::tuple<__int64 &&>>(_Alloc &,_Objty *const ,const std::piecewise_construct_t &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&> &&,std::tuple<__int64 &&> &&)' being compiled
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,int>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,int>>>::void_pointer>>,
              _Ty=std::pair<const std::string,int>,
              _Objty=std::pair<const std::string,int>
          ]
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xmemory(723,82):
  	see reference to function template instantiation 'std::pair<const std::string,int>::pair<_Ty&&,__int64&&>(std::piecewise_construct_t,std::tuple<_Ty &&>,std::tuple<__int64 &&>)' being compiled
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>
          ]
  	C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\utility(313,15):
  	see reference to function template instantiation 'std::pair<const std::string,int>::pair<std::tuple<_Ty &&>,std::tuple<__int64 &&>,0,0>(_Tuple1 &,_Tuple2 &,std::integer_sequence<size_t,0>,std::integer_sequence<size_t,0>)' being compiled
          with
          [
              _Ty=std::basic_string<char,std::char_traits<char>,std::allocator<char>>,
              _Tuple1=std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&>,
              _Tuple2=std::tuple<int64_t &&>
          ]
  
  Generating Code...
  2023.vcxproj -> C:\Users\Luke\Documents\Studio\advent-of-code\2023\x64\Debug\2023.exe
